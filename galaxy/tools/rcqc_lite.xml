<tool id="rcqc_lite" name="Report Calc for Quality Control - Lite" version="0.1.1" refresh_on_change="True">
	<description>Set thresholds for a number of standard quality control metrics provided by reports like FastQC, QUAST, CheckM, etc. </description>
	<requirements>
		<requirement type="package" version="0.1.0">rcqc</requirement>
	</requirements>
    <stdio>
        <exit_code range="1:" />
    </stdio>
    <command interpreter="python"><![CDATA[
	rcqc.py
	--HTML "$html_file" 
	--folder "$html_file.files_path"
	#set $sep = ''
	--input "
	#for $i, $f in enumerate($input_files)
		$sep$f.file_name:$f.name:$f.ext
		#set $sep = ','
	#end for
	"
	--recipe "$recipe_file"
	
	#if $daisychain
		--daisychain $daisychain
	#end if
	
	#if $reference
		## --tables "${ str($__app__.config.tool_data_path) + '/' + str($__app__.tool_data_tables[ 'reference_genome'].get_filename_for_source(False).split('/')[1] ) }:$reference" 
		## Hassle: what were numbers in data table are now json strings:
		#set $data = filter( lambda x: str( x['value'] ) == str( $reference ), $__app__.tool_data_tables[ 'rcqc_parameters' ].get_named_fields_list() )
		#set $obj = {}
		#for $i, $field in enumerate($data)
			#if $field['type'] != 'label'
				#set $obj[$field['type']] = $field['name']
			#end if
		#end for
		--json "{\"report/parameters\": ${str( $obj ).replace("'",r'\"') } }" 
	#end if

	#if $rcqc_report
	--output "$rcqc_report_file"
	#end if

	#if $optional_section > ''
	--options "$optional_section"
	#end if

	#if $tests or $settings or $drop_rules
	--custom "$custom_rules"
	#end if

	#if $save_rules
	--save_rules "$save_rule_file"
	#end if

	#if $debug
	--debug
	#end if
    ]]></command>
    
    <inputs>
		<param name="input_files" type="data" format="tabular,txt,json" multiple="true" label="Log or report file(s) to analyze"/> 

		<param name="daisychain" type="data" format="json" optional="True" label="Input report (JSON format)"/> 

		<param name="reference" type="select" label="Reference Genome" optional="True" help="Select a reference genome to have related settings (e.g. good reference genome size ratio) inserted into the recipe job.">
    			<options from_data_table="rcqc_parameters">
                    <filter type="sort_by" column="name"/>
                   <filter type="static_value" name="type" value="label" column="1" />
              </options>
  		</param>

		<param name="recipe_file" type="select" display="radio" label="Recipe script" optional="False">
			<options from_data_table="rcqc_recipes"/>
		</param>

		<param name="optional_section" type="select" display="radio" label="Recipe script option" dynamic_options="get_rule_section(recipe_file, False)" help="If the recipe script has optional sections, choose one here." optional="True" > <!-- ,rules_file -->
		 </param>
		 
		<param name="recipe_viewer" type="select" label="Recipe viewer" dynamic_options="get_rule_list(False, reference)" multiple="False" optional="False"  refresh_on_change="True" help="Click to view the recipe script's statements. This is not an input." />
		
		<repeat name="settings" title="Add setting" min="0" help="A setting here will override one that is in a 'Setting[...]' section of the recipe.">
			<param name="variable" type="select" dynamic_options="get_rule_variables()" label="Set" />
			<param name="value" type="text" value="" label="=" /><!-- Allows for textual values  -->
			<!--
				<validator type="regex" message="Please input a number">([0-9]+|[0-9]*\.[0-9]+)</validator>
			</param>
			-->
		</repeat>
		
		<repeat name="tests" title="Add quality control test" min="0" help="These are executed after the recipe's other 'Quality control' section statements.">
				
			<param name="action" type="select" label="Do">
				<option value="job">halt job</option>
				<option value="qc">quality control warning</option>
			</param>
			
			<!-- Each recipe file has a section of available fields for whome thresholds or values can be set. -->
			<param name="variable" type="select" dynamic_options="get_rule_variables()" label="if" />

			<param name="comparison" type="select" label="is">
				<option value="ge">&gt;= </option>
				<option value="gt">&gt;</option>
				<option value="lt">&lt; </option>
				<option value="le">&lt;= </option>
				<option value="==">equal to </option>
				<option value="!=">not equal to </option>
			</param>

			<param name="value" type="text" value="" label="value">
				<!-- validator type="regex" message="Please input a number">([-]?[0-9]+|[-]?[0-9]*\.[0-9]+)</validator -->
			</param>

			<param name="variable2" type="select" dynamic_options="get_rule_variables()" label="or variable" optional="True" />
			
			<param name="message" label="Error message" type="text" >
				<sanitizer sanitize="False"></sanitizer>
			</param>
			
		</repeat>

		<param name="drop_rules" type="select" label="Drop recipe statement(s)" dynamic_options="get_rule_list(False)" multiple="True" optional="True"  refresh_on_change="True" help="" />

		<param name="rcqc_report" type="boolean" label="Output report" help="This JSON report can be input to a subsequent report by using the daisychain input" default="False" />	

		<param name="save_rules" type="boolean" label="Save new rule set" help="If you customize your rule set you can save it to a new rule file" default="False" />	
		
		<param name="debug" type="boolean" label="Debug" help="This provides more details of statement execution in the tool's View details page > Tool Standard Output log" default="False" />	
		
    </inputs>
    
	<configfiles>
		<!-- Rule file contains [section name]:[row]\t[0|1]\t[plain text rules] with last parameter base64 encoded for character-proof transmission -->
		<configfile name="custom_rules">#
#for $item2 in $settings
#set line = 'store('+ str($item2.value) + ' ' + str($item2.variable) + ')'
## Settings go before processing section:
Settings:	0	$line.encode('base64').replace('\n','')  
#end for 

#for $item in $tests
	#if len(str($item.value)) 
		#set value = str($item.value)
	#else
		#set value = str($item.variable2)
	#end if
	#set line = 'if('  + str($item.comparison) + '(' + str($item.variable) + ' ' + $value + ') fail('+ str($item.action) + ' "' + str($item.message) + '") )'   
## New QC statements go at end of existing QC section (no starting row specified):
Quality control:	0	$line.encode('base64').replace('\n','')
#end for 

#set drops = str($drop_rules).split(',')
#if drops != 'None'
	#for $item in $drops
$item	1	
	#end for 
#end if
</configfile>
	</configfiles>

    <outputs>
		<data format="html" name="html_file" label="rcqc_folder"/>
		<data name="rcqc_report_file" format="json" label="rcqc_report">
			<filter>(rcqc_report == True)</filter>
		</data>
		<!-- Note, filter won't work if no save_rules parameter exists -->
		<data name="save_rule_file" format="json" label="rcqc_ruleset">
			<filter>(save_rules == True)</filter>
		</data>    	

    </outputs>

	<code file="rcqc_form.py" />
	
    <help><![CDATA[
==============================================
Report Calc for Quality Control - Lite version
==============================================
Report Calc for Quality Control - Lite (RCQC Lite) is a simplified interface to the RCQC scripting language interpreter that can text-mine documents for field labels and values, and can execute rules that manipulate these values in its memory resident data store in order to create reports and to control job execution flow within a workflow engine. RCQC Lite allows easy adjustment of parameters that affect workflow processing. One selects a particular "recipe" file for extracting QC data from a given FastQC, QUAST, CheckM, etc. log file. Options for adjusting the default thresholds for particualr QC metrics are provided. If after all the rules have processed, a namespace variable called **"report/"** exists, it can be written to a basic tab-delimited, JSON or HTML file.

Note that there are two levels of failure this tool can report.  A QC failure (shown as function "**fail(qc [message])**" ) is a message inserted into the report, but no change in workflow behaviour occurs.  A JOB failure (shown as "**fail(job [message])**" ) provides the report with a job error message but also fails the RCQC job task (and potentially the workflow as a whole).  Currently however only more recent Galaxy versions can trigger a halt to a workflow.

More powerful access to the RCQC engine is privided in the full RCQC tool version.  Details on the RCQC language and interpreter are available at https://github.com/public-health-bioinformatics/rcqc/wiki

    ]]></help>
</tool>
