<tool id="rcqc" name="Report Calc for Quality Control" version="0.1.1" refresh_on_change="True">
	<description>This is the power-user interpreter for the RCQC scripting language which can text-mine documents for field labels and values, and can execute rules in order to control job execution flow within a workflow engine.</description>
	<requirements>
		<requirement type="package" version="0.1.0">rcqc</requirement>
	</requirements>
    <stdio>
        <exit_code range="1:" />
    </stdio>
    <requirements>
    </requirements>
    <command interpreter="python"><![CDATA[
        rcqc.py
        --HTML "$html_file" 
        --folder "$html_file.files_path"
        #set $sep = ''
        --input "
        #for $i, $f in enumerate($input_files)
        	$sep$f.file_name:$f.name:$f.ext
        	#set $sep = ','
        #end for
        "

		#if $daisychain
		--daisychain $daisychain
		#end if

        #if $reference
        ## --tables "${ str($__app__.config.tool_data_path) + '/' + str($__app__.tool_data_tables[ 'reference_genome'].get_filename_for_source(False).split('/')[1] ) }:$reference" 
        ## Hassle: what were numbers in data table are now json strings:
        #set $data = filter( lambda x: str( x['value'] ) == str( $reference ), $__app__.tool_data_tables[ 'rcqc_parameters' ].get_named_fields_list() )
        #set $obj = []
        #for $field in $data
        	#set $obj[$data['type']] = $data['name']
		#end for
        --json "{\"report/parameters\": ${str( $obj ).replace("'",r'\"') } }" 
        #end if
        
        --recipe "$recipe_file"
        
        #if $output_json
        --output "$output_json_file"
        #end if
        
	   --options "$optional_section"
	   
        #if len($custom)
        --custom "$custom_rules"
        #end if

        #if $save_rules
        --save_rules "$save_rule_file"
        #end if
        
        #if $debug
        --debug
        #end if
    ]]></command>
    
    <inputs>
		<param name="input_files" type="data" format="tabular,txt,json" multiple="true" label="Log or report file(s) to analyze"/> 
 
		<param name="daisychain" type="data" format="json" optional="True" label="Previous RCQC report to add on too"/> 

		<param name="reference" type="select" label="Reference Genome" optional="True" help="Select a reference genome to have related settings (e.g. good reference genome size ratio) inserted into the recipe job.">
    			<options from_data_table="rcqc_parameters">
                    <filter type="sort_by" column="name"/>
                   <filter type="static_value" name="type" value="label" column="1" />
              </options>
  		</param>

		<param name="recipe_file" type="select" display="radio" label="Recipe script" optional="True">
			<options from_data_table="rcqc_recipes"/>
		</param>
		<!-- param name="recipe_file" type="select" display="radio" label="Recipe script" dynamic_options="get_recipe_list()" optional="True" / -->
		<param name="recipe_file2" type="data" format="json" label="OR recipe script (from history)" optional="True" refresh_on_change="True" />

		<param name="optional_section" type="select" display="radio" label="Recipe script option" dynamic_options="get_rule_section(recipe_file, False)"  help="Select which sections of the rule file should be executed." optional="True" />
		
		<repeat name="custom" title="Modify rule section" >
			
			<param name="rule_position" type="select" label="At rule" dynamic_options="get_rule_list()" multiple="false" optional="True"  />
			<param name="drop_rule" type="boolean" label="Drop this rule" truevalue="1" falsevalue="0"/>
			<param name="rules" type="text" area="True" size="5x50" label="Add rule(s) in format: function (parameter1 parameter2 ...) ..." />

		</repeat>	

		<param name="function_list" type="select" label="Function reference"  dynamic_options="get_function_list()" help="Look up function definitions here for functions used in you rules.  This is not an input." />
			
		<param name="save_rules" type="boolean" label="Save new rule set" help="If you customize your rule set you can save it to a new rule file" default="False" />

		<param name="output_json" type="boolean" label="Output 'report/' namespace as json dataset" help="This can be input to a subsequent report engine" default="False" />	

		<param name="debug" type="boolean" label="Debug rule set" help="This provides more details of rule execution in the tool's View details page > Tool Standard Output log" default="False" />	
		
    </inputs>
    
	<configfiles>
		<!-- Rule file contains [section name]:[row]\t[0|1]\t[plain text rules]  #replace(r'"',r'\"').replace('\n',r'\n') -->
		<configfile name="custom_rules">#
#for $rule_choice in $custom
$rule_choice.rule_position	$rule_choice.drop_rule	$rule_choice.rules.encode('base64').replace('\n','')
#end for 
</configfile>
	</configfiles>

    <outputs>
		<data format="html" name="html_file" label="rcqc_folder"/>
		<data name="output_json_file" format="json" label="rcqc_json">
			<filter>(output_json == True)</filter>
		</data>
		<data name="save_rule_file" format="json" label="rcqc_ruleset">
			<filter>(save_rules == True)</filter>
		</data>    	
    </outputs>

	<code file="rcqc_form.py" />
	
    <help><![CDATA[
===============================
Report Calc for Quality Control
===============================
Report Calc for Quality Control (RCQC) is a simple scripting language interpreter that can text-mine documents for field labels and values, and can execute rules that manipulate these values in its memory resident data store - or "namespace" - in order to create reports and to control job execution flow within a workflow engine. It provides basic tab-delimited, JSON and HTML reporting of any portion of its data store.  RCQC liaises with the overarching workflow engine via its own exit codes. The design goal is to allow easy adjustment of rules and parameters that affect workflow processing.

RCQC runs "recipe files" of rules that can locate and parse numeric, boolean and other data from the input files which can be in text, tabular and JSON format.  Each rule is expressed as a function followed by parameters, where each parameter can also be a function with parameters, e.g. "functionA(parameter1 parameter2 functionB(parameter3 ...) )". Rules are executed from top to bottom. Behind the scenes rules are actually translated into JSON format. 

Note that there are two levels of failure this tool can report.  A QC failure (shown as function "**fail(qc [message])**" ) is a message inserted into the report, but no change in workflow behaviour occurs.  A JOB failure (shown as "**fail(job [message])**" ) provides the report with a job error message but also fails the RCQC job task (and potentially the workflow as a whole).  Currently however only more recent Galaxy versions can trigger a halt to a workflow.

More details on the RCQC language and interpreter are available at https://github.com/public-health-bioinformatics/rcqc/wiki

    ]]></help>
</tool>
